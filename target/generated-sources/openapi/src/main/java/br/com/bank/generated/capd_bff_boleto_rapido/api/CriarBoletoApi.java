/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package br.com.bank.generated.capd_bff_boleto_rapido.api;

import br.com.bank.generated.capd_bff_boleto_rapido.model.BoletoRapidoRequest;
import br.com.bank.generated.capd_bff_boleto_rapido.model.BoletoRapidoResponse;
import br.com.bank.generated.capd_bff_boleto_rapido.model.Error;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-08-21T18:32:55.320254800-03:00[America/Sao_Paulo]")
@Validated
@Tag(name = "CriarBoleto", description = "the CriarBoleto API")
public interface CriarBoletoApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /gerar-boleto/me : Retorna o boleto criado para realizar o depósito na conta do cliente logado na plataforma.
     *
     * @param xBradConta Header de conta (required)
     * @param xBradCliente Header de cliente (required)
     * @param xBradGeolocalizacao Header da geolocalização do dispositivo do cliente (required)
     * @param authorization Token de autorização JWT (required)
     * @param boletoRapidoRequest Dados do request de entrada para gerar o boleto de cobrança (required)
     * @return Agendamentos de boleto bancários retornados com sucesso (status code 201)
     *         or Erro durante a solicitação para gerar o Boleto (status code 400)
     *         or Não foi possível realizar o processo de autenticação (status code 401)
     *         or Não existem permissões para realizar esta operação (status code 403)
     *         or Precisa ajustar (status code 412)
     *         or Precisa ajustar (status code 422)
     *         or Muitas Solicitações (status code 429)
     *         or Erro Interno do Servidor (status code 500)
     *         or Serviço Indisponível (status code 503)
     */
    @Operation(
        operationId = "createBankSlips",
        summary = "Retorna o boleto criado para realizar o depósito na conta do cliente logado na plataforma.",
        tags = { "CriarBoleto" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Agendamentos de boleto bancários retornados com sucesso", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BoletoRapidoResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Erro durante a solicitação para gerar o Boleto", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Não foi possível realizar o processo de autenticação", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Não existem permissões para realizar esta operação", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "412", description = "Precisa ajustar", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "422", description = "Precisa ajustar", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "429", description = "Muitas Solicitações", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "500", description = "Erro Interno do Servidor", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "503", description = "Serviço Indisponível", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "cookieAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/gerar-boleto/me",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<BoletoRapidoResponse> _createBankSlips(
        @NotNull @Parameter(name = "X-Brad-Conta", description = "Header de conta", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-Brad-Conta", required = true) String xBradConta,
        @NotNull @Parameter(name = "X-Brad-Cliente", description = "Header de cliente", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-Brad-Cliente", required = true) String xBradCliente,
        @NotNull @Parameter(name = "X-Brad-Geolocalizacao", description = "Header da geolocalização do dispositivo do cliente", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-Brad-Geolocalizacao", required = true) String xBradGeolocalizacao,
        @NotNull @Parameter(name = "Authorization", description = "Token de autorização JWT", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "Authorization", required = true) String authorization,
        @Parameter(name = "BoletoRapidoRequest", description = "Dados do request de entrada para gerar o boleto de cobrança", required = true) @Valid @RequestBody BoletoRapidoRequest boletoRapidoRequest
    ) {
        return createBankSlips(xBradConta, xBradCliente, xBradGeolocalizacao, authorization, boletoRapidoRequest);
    }

    // Override this method
    default  ResponseEntity<BoletoRapidoResponse> createBankSlips(String xBradConta, String xBradCliente, String xBradGeolocalizacao, String authorization, BoletoRapidoRequest boletoRapidoRequest) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"idProduto\" : \"idProduto\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
